@page "/students/delete"
@inject IDbContextFactory<PruebaCRUD.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>


<div class="alert alert-danger">
<h1>Eliminar Estudiante</h1>
    <strong>¿Estás seguro de que deseas eliminar este registro?</strong>
    <br />
    Esta acción no se puede deshacer.
</div>

@* <h4 class="text-danger ">¿Estas seguro de que quieres eliminar esto?</h4> *@
<div class="mb-5">
    @* <h2>Student</h2> *@
    <hr />
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
    

    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title text-primary">@student.Nombres @student.Apellidos</h5>

            <div class="row">
                <div class="col-md-6">
                    <p><strong>Email:</strong> @student.Email</p>
                    <p><strong>CURP:</strong> @student.CURP</p>
                    <p><strong>Teléfono:</strong> @student.Telefono</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Carrera:</strong> @student.Carrera</p>
                    <p><strong>Modalidad:</strong> @student.Modalidad</p>
                    <p><strong>Becado:</strong> 
                        @(student.EsBecado ? "Sí" : "No")
                    </p>
                </div>
            </div>
            <EditForm method="post" Model="student" OnValidSubmit="DeleteStudent" FormName="delete" Enhance>
                <div class="d-flex gap-3">
                    <button type="submit" class="btn btn-danger" disabled="@(student is null)">Eliminar</button>
                    <a href="/" class="btn btn-outline-secondary">Volver</a>
                </div>
            </EditForm>
        </div>
    </div>
    }
</div>

@code {
    private Student? student;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.Student.FirstOrDefaultAsync(m => m.Id == Id);

        if (student is null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task DeleteStudent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Student.Remove(student!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }
}
