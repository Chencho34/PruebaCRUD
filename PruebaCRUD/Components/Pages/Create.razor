@page "/students/create"
@inject IDbContextFactory<PruebaCRUD.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>


<div class="alert alert-primary">
    <h1>Registrar Nuevo Estudiante</h1>
</div>

<hr />

<EditForm method="post" Model="Student" FormName="create" Enhance OnValidSubmit="AddStudent" class="mb-5">
    <DataAnnotationsValidator />
    @* <ValidationSummary class="text-danger" /> *@

    <!-- Datos personales -->
    <h5 class="mt-4">👤 Datos personales</h5>
    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="nombres" class="form-label">Nombres</label>
            <InputText id="nombres" @bind-Value="Student.Nombres" class="form-control" />
            <ValidationMessage For="() => Student.Nombres" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="apellidos" class="form-label">Apellidos</label>
            <InputText id="apellidos" @bind-Value="Student.Apellidos" class="form-control" />
            <ValidationMessage For="() => Student.Apellidos" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="fechanacimiento" class="form-label">Fecha de nacimiento</label>
            <InputDate id="fechanacimiento" @bind-Value="Student.FechaNacimiento" class="form-control" />
            <ValidationMessage For="() => Student.FechaNacimiento" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="sexo" class="form-label">Sexo</label>
            <InputSelect id="sexo" @bind-Value="Student.Sexo" class="form-select">
                <option value="">-- Selecciona --</option>
                @foreach (var genero in Genero)
                {
                    <option value="@genero">@genero</option>
                }
            </InputSelect>
            <ValidationMessage For="() => Student.Sexo" />
        </div>
    </div>

    <!-- Contacto -->
    <h5 class="mt-4">📞 Contacto</h5>
    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="telefono" class="form-label">Teléfono</label>
            <InputText id="telefono" @bind-Value="Student.Telefono" class="form-control" />
            <ValidationMessage For="() => Student.Telefono" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" @bind-Value="Student.Email" class="form-control" />
            <ValidationMessage For="() => Student.Email" />
        </div>
        <div class="col-md-12 mb-3">
            <label for="direccion" class="form-label">Dirección</label>
            <InputText id="direccion" @bind-Value="Student.Direccion" class="form-control" />
            <ValidationMessage For="() => Student.Direccion" />
        </div>
    </div>

    <!-- Escolaridad -->
    <h5 class="mt-4">🎓 Escolaridad</h5>
    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="carrera" class="form-label">Carrera</label>
            <InputSelect id="carrera" @bind-Value="Student.Carrera" class="form-select">
                <option value="">-- Selecciona una carrera --</option>
                @foreach (var carrera in Carreras)
                {
                    <option value="@carrera">@carrera</option>
                }
            </InputSelect>
            <ValidationMessage For="() => Student.Carrera" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="modalidad" class="form-label">Modalidad</label>
            <InputSelect id="modalidad" @bind-Value="Student.Modalidad" class="form-select">
                <option value="">-- Selecciona modalidad --</option>
                @foreach (var modalidad in Modalidades)
                {
                    <option value="@modalidad">@modalidad</option>
                }
            </InputSelect>
            <ValidationMessage For="() => Student.Modalidad" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="curp" class="form-label">CURP</label>
            <InputText id="curp" @bind-Value="Student.CURP" class="form-control" />
            <ValidationMessage For="() => Student.CURP" />
        </div>
        <div class="col-md-6 mb-3 form-check d-flex align-items-center pl-5">
            <InputCheckbox id="esbecado" @bind-Value="Student.EsBecado" class="mt-5 form-check-input" />
            <label for="esbecado" class="form-check-label ms-2 mt-5">¿Es becado?</label>
            <ValidationMessage For="() => Student.EsBecado" />
        </div>
    </div>

    <!-- Otros -->
    <h5 class="mt-4">🐾 Otros</h5>
    <div class="row">
        <div class="col-md-12 mb-3">
            <label for="descripcion" class="form-label">Descripción</label>
            <InputText id="descripcion" @bind-Value="Student.Descripcion" class="form-control" />
            <ValidationMessage For="() => Student.Descripcion" />
        </div>
        <div class="col-md-6 mb-3 form-check d-flex align-items-center">
            <InputCheckbox id="tienemascotas" @bind-Value="Student.TieneMascotas" class="form-check-input" />
            <label for="tienemascotas" class="form-check-label ms-2">¿Tiene mascotas?</label>
        </div>
        <div class="col-md-6 mb-3">
            <label for="mascotas" class="form-label">¿Qué mascotas?</label>
            <InputText id="mascotas" @bind-Value="Student.Mascotas" class="form-control" />
            <ValidationMessage For="() => Student.Mascotas" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="horariocomida" class="form-label">Horario de comida</label>
            <InputText id="horariocomida" @bind-Value="Student.HorarioComida" class="form-control" />
            <ValidationMessage For="() => Student.HorarioComida" />
        </div>
    </div>

    <!-- Acciones -->
    <div class="mt-4 d-flex gap-3">
        <button type="submit" class="btn btn-primary">Agregar</button>
        <a href="/students" class="btn btn-outline-secondary">Cancelar</a>
    </div>
</EditForm>


@code {
    [SupplyParameterFromForm]
    private Student Student { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddStudent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Student.Add(Student);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }

    private List<string> Carreras = new()
    {
        "Ingenieria en Sistemas",
        "Biologia",
        "Derecho",
        "Comercio",
        "Educacion",
        "Psicologia",
        "Matematicas",
        "Quimica",
        "Economia",
        "Administracion",
        "Mercadotecnia"
    };

    private List<string> Modalidades = new()
    {
        "Presencial",
        "Virtual",
        "Dual"
    };

    private List<string> Genero = new()
    {
        "H",
        "M"
    };
}
